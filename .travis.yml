language: cpp
compiler: gcc
sudo: require
dist: xenial

before_install:
  - sudo add-apt-repository ppa:beineri/opt-qt593-xenial -y
  - sudo add-apt-repository ppa:deadsnakes/ppa -y # Newer Python for Meson
  - sudo apt-get update -qq

install:
  - sudo apt-get -y install libxapian-dev zlib1g-dev lzma-dev qt59base qt59webengine qt59svg qt59imageformats libicu-dev libpugixml-dev aria2 libaria2 python3.6-venv
  - source /opt/qt*/bin/qt*-env.sh

script:
  # Install Mustache "manually"
  - git clone https://github.com/kainjow/Mustache
  - cd Mustache
  - make
  # FIXME: "sudo make install" does not work; hence we need to copy stuff somewhere manually
  - cd ..
  # Install Meson "manually"
  - virtualenv -p python3 ./ # Create virtualenv
  - source bin/activate      # Activate the virtualenv
  - pip3 install meson       # Install Meson
  - hash -r                  # Refresh bash paths
  # Install Ninja "manually"
  - git clone git://github.com/ninja-build/ninja.git
  - cd ninja
  - git checkout release
  - ./configure.py --bootstrap
  - mkdir -p ../bin
  - cp ninja ../bin
  - cd ..
  # Build libzim
  - git clone https://github.com/openzim/libzim
  - cd libzim/
  - meson . build
  - curl --upload-file ./build/compile_commands.json https://transfer.sh/compile_commands.json
  - ninja -C build
  - ninja -C build install
  - cd ..
  # Build kiwix-lib
  - git clone https://github.com/kiwix/kiwix-lib
  - cd kiwix-lib/
  - meson . build
  - ninja -C build
  - ninja -C build install
  - cd ..
  # Build kiwix
  - qmake CONFIG+=release PREFIX=/usr
  - make -j$(nproc)
  - make INSTALL_ROOT=appdir -j$(nproc) install ; find appdir/
  - wget -c -nv "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage"
  - chmod a+x linuxdeployqt-continuous-x86_64.AppImage
  - unset QTDIR; unset QT_PLUGIN_PATH ; unset LD_LIBRARY_PATH
  # export VERSION=... # linuxdeployqt uses this for naming the file
  - ./linuxdeployqt-continuous-x86_64.AppImage appdir/usr/share/applications/*.desktop -appimage

after_success:
  # find appdir -executable -type f -exec ldd {} \; | grep " => /usr" | cut -d " " -f 2-3 | sort | uniq # for debugging
  # curl --upload-file APPNAME*.AppImage https://transfer.sh/APPNAME-git.$(git rev-parse --short HEAD)-x86_64.AppImage
  - wget -c https://github.com/probonopd/uploadtool/raw/master/upload.sh
  - bash upload.sh APPNAME*.AppImage*
  
branches:
  except:
    - # Do not build tags that we create when we upload to GitHub Releases
    - /^(?i:continuous)/
